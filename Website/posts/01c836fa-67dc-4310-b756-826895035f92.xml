<?xml version="1.0" encoding="utf-8"?>
<post>
  <title>Test if MasterPage ContentPlaceHolder has content or is empty</title>
  <slug>test-if-masterpage-contentplaceholder-has-content-or-is-empty</slug>
  <author>Chris Hynes</author>
  <pubDate>2009-01-22 18:48:38</pubDate>
  <lastModified>2014-11-20 17:18:41</lastModified>
  <content>&lt;p&gt;UPDATE: Thanks to &lt;a rel="nofollow" href="http://infomason.org"&gt;Jon Hynes of InfoMason&lt;/a&gt;, added functionality to support nested master pages. Code updates &lt;font style="BACKGROUND-COLOR: #00ffff"&gt;highlighted&lt;/font&gt;.&lt;/p&gt;
&lt;p&gt;I've seen several articles on the web that lay out a method for checking to see if a ContentPlaceHolder has any content or is empty. These work some of the time but unfortunately fall down in certain situations – like a placeholder that contains an embedded literal code block for example.&lt;/p&gt;
&lt;p&gt;In this case, there is no publicly exposed method that will provide the answer and no way to assemble any information that would tell us whether the ContentPlaceHolder is empty or has content. Fortunately, there is an internal .NET framework property that gives exactly what we need. A little reflection magic and we have a method that works in all circumstances.&lt;/p&gt;
&lt;p&gt;The MasterPage has a property called ContentTemplates that is a dictionary of all content templates that have been generated by the content page. If we check this, we can determine whether in fact the ContentPlaceHolder has been overridden by the content page. This, combined with the control check gives us a method that tells us if the ContentPlaceHolder has anything in it.&lt;/p&gt;
&lt;p&gt;This means we have three methods that work together to provide the resulting boolean. First, a method to check if there are any non empty controls in the ContentPlaceHolder:&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;public static bool HasNonEmptyControls(ContentPlaceHolder cph)&lt;br /&gt;
{&lt;br /&gt;
    if (cph.Controls.Count == 0)&lt;br /&gt;
    {&lt;br /&gt;
        return false;&lt;br /&gt;
    }&lt;br /&gt;
    else if (cph.Controls.Count == 1)&lt;br /&gt;
    {&lt;br /&gt;
        LiteralControl c = cph.Controls[0] as LiteralControl;&lt;br /&gt;
&lt;br /&gt;
        if (string.IsNullOrEmpty(c.Text) || IsWhiteSpace(c.Text))&lt;br /&gt;
            return false;&lt;br /&gt;
    }&lt;br /&gt;
&lt;br /&gt;
    return true;&lt;br /&gt;
}&lt;br /&gt;
&lt;br /&gt;
static bool IsWhiteSpace(string s)&lt;br /&gt;
{&lt;br /&gt;
    for (int i = 0; i &amp;lt; s.Length; i++)&lt;br /&gt;
        if (!char.IsWhiteSpace(s[i]))&lt;br /&gt;
            return false;&lt;br /&gt;
&lt;br /&gt;
    return true;&lt;br /&gt;
}&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;Next, a method to check if the ContentPlaceHolder has a content template defined on the content page:&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;static readonly Type _masterType = typeof(MasterPage);&lt;br /&gt;
static readonly PropertyInfo _contentTemplatesProp = _masterType.GetProperty("ContentTemplates", BindingFlags.GetProperty | BindingFlags.NonPublic | BindingFlags.Instance);&lt;br /&gt;
&lt;br /&gt;
public static bool HasContentPageContent(ContentPlaceHolder cph)&lt;br /&gt;
{&lt;br /&gt;
&lt;font style="BACKGROUND-COLOR: #00ffff"&gt;    IDictionary templates = null;&lt;br /&gt;
    MasterPage master = cph.Page.Master;&lt;br /&gt;
&lt;br /&gt;
    while (templates == null &amp;amp;&amp;amp; master != null)&lt;br /&gt;
    {&lt;br /&gt;
        templates = (IDictionary)_contentTemplatesProp.GetValue(master, null);&lt;br /&gt;
        master = master.Master;&lt;br /&gt;
    }&lt;/font&gt;&lt;br /&gt;
&lt;br /&gt;
&lt;font style="BACKGROUND-COLOR: #00ffff"&gt;    if (templates == null)&lt;br /&gt;
        return false;&lt;br /&gt;
&lt;/font&gt;&lt;br /&gt;
    bool isSpecified = false;&lt;br /&gt;
&lt;br /&gt;
    foreach (string key in templates.Keys)&lt;br /&gt;
    {&lt;br /&gt;
        if (key == cph.ID)&lt;br /&gt;
        {&lt;br /&gt;
            isSpecified = true;&lt;br /&gt;
&lt;br /&gt;
            break;&lt;br /&gt;
        }&lt;br /&gt;
    }&lt;br /&gt;
&lt;br /&gt;
    return isSpecified;&lt;br /&gt;
}&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;This is where the reflection comes in. We grab the ContentTemplates dictionary off the MasterPage and check to see if the specified ContentPlaceHolder is defined.&lt;/p&gt;
&lt;p&gt;Finally, we call both methods to come to a final determination of whether the ContentPlaceHolder is empty or has content defined:&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;public static bool HasContentOrControls(ContentPlaceHolder cph)&lt;br /&gt;
{&lt;br /&gt;
    return HasNonEmptyControls(cph) || HasContentPageContent(cph);&lt;br /&gt;
}&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;This code will all run on .NET 2.0 and above. If you are using .NET 3.5, you can use the following extension method to add this to the ContentPlaceHolder itself:&lt;/p&gt;
&lt;blockquote&gt;&lt;code&gt;public static bool HasContentOrControls(this ContentPlaceHolder cph)&lt;br /&gt;
{&lt;br /&gt;
    return MasterHelper.HasContentOrControls(cph);&lt;br /&gt;
}&lt;/code&gt;&lt;/blockquote&gt;
&lt;p&gt;&lt;a rel="nofollow" href="http://programcsharp.com/blog/files/MasterHelper-Source.zip"&gt;&lt;img border="0" alt="" width="16" height="16" src="http://programcsharp.com/blog/files/icon-cs.png" /&gt;MasterHelper source&lt;/a&gt;&lt;/p&gt;</content>
  <ispublished>true</ispublished>
  <categories>
    <category>ASP.NET</category>
  </categories>
  <comments>
    <comment isAdmin="false" id="2">
      <author>Luke</author>
      <email />
      <website />
      <ip />
      <userAgent />
      <date>2009-02-24 15:51:27</date>
      <content>Thank you, exactly what I needed.</content>
    </comment>
    <comment isAdmin="false" id="3">
      <author>wilf</author>
      <email />
      <website />
      <ip />
      <userAgent />
      <date>2009-03-19 10:25:09</date>
      <content>KISS:&lt;br /&gt;keep it small and simple!&lt;br /&gt;great solution for simple problem!&lt;br /&gt;I need only the master reflection code.&lt;br /&gt;thanks wilf</content>
    </comment>
    <comment isAdmin="false" id="4">
      <author>Jeff L</author>
      <email />
      <website />
      <ip />
      <userAgent />
      <date>2009-07-15 18:29:42</date>
      <content>fantastic, works exactly as I expected. Thanks.</content>
    </comment>
  </comments>
</post>